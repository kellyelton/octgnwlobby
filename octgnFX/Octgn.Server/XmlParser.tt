<#@ template language="C#" hostspecific="true" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="System.Xml" #>
<#@ assembly name="System.Xml.Linq" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Xml.Linq" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Text" #>
<#
  XDocument doc = XDocument.Load(Host.ResolvePath(@"Protocol.xml"));
#>
/* 
 * This file was automatically generated by MyGeneration! (from XmlParser.zeus)
 * Do not modify, changes will get lost when the file is regenerated!
 */
using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.IO;
using System.Globalization;
using System.Text;
using System.Xml;

namespace Octgn.Server
{
	sealed class XmlParser
	{
		Handler handler;
		
		public XmlParser(Handler handler)
		{ this.handler = handler; }
		
		public void Parse(string xml)
		{
			StringReader sr = new StringReader(xml);
			XmlReader reader = XmlReader.Create(sr);
			reader.Read();
			string method = reader.Name;
			string muted = reader.GetAttribute("muted");
            if (!string.IsNullOrEmpty(muted))
                handler.muted = int.Parse(muted);
            else
                handler.muted = 0;
			reader.ReadStartElement();	// <method>
			switch (method)
			{
<#
  PushIndent("\t\t\t\t");
  foreach (var msg in doc.Root.Elements("msg").Where(m => (bool?)m.Attribute("server") == true))
  {
    string msgName = msg.Attribute("name").Value;
    WriteLine("case \"{0}\":", msgName);
    WriteLine("{");
    PushIndent("\t");
    int paramId = 0;
    foreach (var p in msg.Elements("param"))
    {
      string code = paramDeclarations[p.Attribute("type").Value];
      WriteLine(code, paramId++, p.Attribute("name").Value);
    }
    WriteLine("handler.{0}({1});", msgName, BuildParameters(paramId));
    WriteLine("break;");
    PopIndent();
    WriteLine("}");
  }
  PopIndent();
#>
				default:
					Debug.WriteLine("[Client Parser] Unknown message: " + method);
					break;
			}
		}
	}
}
<#+
  private string BuildParameters(int paramCount)
  {
    var sb = new StringBuilder();
    for (int i = 0; i < paramCount; ++i)
    {
      sb.Append("arg").Append(i).Append(", ");
    }
    if (sb.Length > 0) sb.Remove(sb.Length - 2, 2);
    return sb.ToString();
  }

  private Dictionary<string, string> paramDeclarations = new Dictionary<string, string>()
  {
    { "byte", "byte arg{0} = byte.Parse(reader.ReadElementString(\"{1}\"), CultureInfo.InvariantCulture);" },
    { "ushort", "ushort arg{0} = ushort.Parse(reader.ReadElementString(\"{1}\"), CultureInfo.InvariantCulture);" },
    { "short", "short arg{0} = short.Parse(reader.ReadElementString(\"{1}\"), CultureInfo.InvariantCulture);" },

    { "short[]", @"List<short> list{0} = new List<short>(30);
while (reader.IsStartElement(""{1}""))
	list{0}.Add(short.Parse(reader.ReadElementString(), CultureInfo.InvariantCulture));
short[] arg{0} = list{0}.ToArray();"},

    { "int", "int arg{0} = int.Parse(reader.ReadElementString(\"{1}\"), CultureInfo.InvariantCulture);" },
    
    { "int[]", @"List<int> list{0} = new List<int>(30);
while (reader.IsStartElement(""{1}""))
	list{0}.Add(int.Parse(reader.ReadElementString(), CultureInfo.InvariantCulture));
int[] arg{0} = list{0}.ToArray();" },

    { "ulong", "ulong arg{0} = ulong.Parse(reader.ReadElementString(\"{1}\"), CultureInfo.InvariantCulture);" },

    { "ulong[]", @"List<ulong> list{0} = new List<ulong>(30);
while (reader.IsStartElement(""{1}""))
	list{0}.Add(ulong.Parse(reader.ReadElementString(), CultureInfo.InvariantCulture));
ulong[] arg{0} = list{0}.ToArray();" },

    { "float", "float arg{0} = float.Parse(reader.ReadElementString(\"{1}\"), CultureInfo.InvariantCulture);" },
    { "bool", "bool arg{0} = bool.Parse(reader.ReadElementString(\"{1}\"));" },
    { "string", "string arg{0} = reader.ReadElementString(\"{1}\");" },
    { "Version", "Version arg{0} = new Version(reader.ReadElementString(\"{1}\"));" },
    { "Guid", "Guid arg{0} = new Guid(reader.ReadElementString(\"{1}\"));" },

    { "Guid[]", @"List<Guid> list{0} = new List<Guid>(30);
while (reader.IsStartElement(""{1}""))
	list{0}.Add(new Guid(reader.ReadElementString()));
Guid[] arg{0} = list{0}.ToArray();" },

    { "Player", "byte arg{0} = byte.Parse(reader.ReadElementString(\"{1}\"), CultureInfo.InvariantCulture);" },
    { "Player[]", @"var list{0} = new List<byte>(8);
while (reader.IsStartElement(""{1}""))
  list{0}.Add(byte.Parse(reader.ReadElementString(), CultureInfo.InvariantCulture));
byte[] arg{0} = list{0}.ToArray();" },
    { "ControllableObject", "int arg{0} = int.Parse(reader.ReadElementString(\"{1}\"), CultureInfo.InvariantCulture);" },
    { "Group", "int arg{0} = int.Parse(reader.ReadElementString(\"{1}\"), CultureInfo.InvariantCulture);" },

    { "Group[]", @"List<int> list{0} = new List<int>(30);
while (reader.IsStartElement(""{1}""))
	list{0}.Add(int.Parse(reader.ReadElementString(), CultureInfo.InvariantCulture));
int[] arg{0} = list{0}.ToArray();" },

    { "Card", "int arg{0} = int.Parse(reader.ReadElementString(\"{1}\"), CultureInfo.InvariantCulture);" },
    { "Counter", "int arg{0} = int.Parse(reader.ReadElementString(\"{1}\"), CultureInfo.InvariantCulture);" },
    { "CardOrientation", "CardOrientation arg{0} = (CardOrientation)Enum.Parse(typeof(CardOrientation), reader.ReadElementString(\"{1}\"));" },
    { "Color?", "string arg{0} = reader.ReadElementString(\"{1}\");" }
  };
#>