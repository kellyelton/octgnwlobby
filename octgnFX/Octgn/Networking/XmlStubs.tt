<#@ template language="C#" hostspecific="true" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="System.Xml" #>
<#@ assembly name="System.Xml.Linq" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Xml.Linq" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Text" #>
<#
  XDocument doc = XDocument.Load(Host.ResolvePath(@"..\..\Octgn.Server\Protocol.xml"));
#>
/* 
 * This file was automatically generated.
 * Do not modify, changes will get lost when the file is regenerated!
 */
using System;
using System.Collections.Generic;
using System.IO;
using System.Globalization;
using System.Net.Sockets;
using System.Text;
using System.Windows.Media;
using System.Xml;
using Octgn.Play;

namespace Octgn.Networking
{
	abstract class BaseXmlStub : Octgn.Server.IServerCalls
	{		
		protected XmlWriterSettings xmlSettings = new XmlWriterSettings();			
		
		public BaseXmlStub()
		{ 
			xmlSettings.OmitXmlDeclaration = true;
		}
		
		protected abstract void Send(string xml);
<#
  foreach (var msg in doc.Root.Elements("msg").Where(m => (bool?)m.Attribute("server") == true))
  {
    string msgName = msg.Attribute("name").Value;
#>

		public void <#= msgName #>(<#= ParametersList(msg) #>)
		{
			StringBuilder sb = new StringBuilder();
			XmlWriter writer = XmlWriter.Create(sb, xmlSettings);

			writer.WriteStartElement("<#= msgName #>");
			if (Script.ScriptEngine.CurrentScript != null && Script.ScriptEngine.CurrentScript.muted)
          writer.WriteAttributeString("muted", Script.ScriptEngine.CurrentScript.GetUniqueId().ToString(CultureInfo.InvariantCulture));
      else if (Program.Client.Muted != 0)
          writer.WriteAttributeString("muted", Program.Client.Muted.ToString(CultureInfo.InvariantCulture));
<#
  PushIndent("\t\t\t");
  foreach (var p in msg.Elements("param"))
  {
    string code;
    if (!paramOutput.TryGetValue(p.Attribute("type").Value, out code))
      code = "writer.WriteElementString(\"{0}\", {0}.ToString(CultureInfo.InvariantCulture));";
    WriteLine(code, p.Attribute("name").Value);
  }
  PopIndent();
#>
			writer.WriteEndElement();
			writer.Close();
			Send(sb.ToString());
		}
<# } #>
	}
	
	class XmlSenderStub : BaseXmlStub
	{
		private TcpClient to;
		private byte[] buffer = new byte[1024];
		
		public XmlSenderStub(TcpClient to)
		{ this.to = to; }
		
		protected override void Send(string xml)
		{
			int length = Encoding.UTF8.GetByteCount(xml) + 1;
			if (length > buffer.Length) buffer = new byte[length];
			Encoding.UTF8.GetBytes(xml, 0, xml.Length, buffer, 0);
			buffer[length - 1] = 0;
			try
			{
				Stream stream = to.GetStream();
				stream.Write(buffer, 0, length); stream.Flush();
			}
			catch 
			{ 
				if (Program.Server != null && Program.Server.Disconnected(to))
					return;
				Program.Client.Disconnected();
			}
		}
	}
}
<#+
  private string ParametersList(XElement msg)
  {
    var sb = new StringBuilder();
    foreach (var p in msg.Elements("param"))
      sb.Append(p.Attribute("type").Value)
        .Append(" ")
        .Append(p.Attribute("name").Value)
        .Append(", ");
    if (sb.Length > 0) sb.Remove(sb.Length - 2, 2);
    return sb.ToString();
  }

  private Dictionary<string, string> paramOutput = new Dictionary<string, string>()
  {
    { "Version", "writer.WriteElementString(\"{0}\", {0}.ToString());" },
    { "Guid", "writer.WriteElementString(\"{0}\", {0}.ToString());" },

    { "Guid[]", 
@"foreach (Guid g in {0})
  writer.WriteElementString(""{0}"", g.ToString());" },

    { "CardOrientation", "writer.WriteElementString(\"{0}\", {0}.ToString());" },
    
    { "short[]", 
@"foreach (short p in {0})
				writer.WriteElementString(""{0}"", p.ToString(CultureInfo.InvariantCulture));" },

    { "int[]", 
@"foreach (int p in {0})
				writer.WriteElementString(""{0}"", p.ToString(CultureInfo.InvariantCulture));" },

    { "ulong[]", 
@"foreach (ulong p in {0})
				writer.WriteElementString(""{0}"", p.ToString(CultureInfo.InvariantCulture));" },

    { "string", "writer.WriteElementString(\"{0}\", {0});" },

    { "Player", "writer.WriteElementString(\"{0}\", {0}.Id.ToString(CultureInfo.InvariantCulture));" },
    { "ControllableObject", "writer.WriteElementString(\"{0}\", {0}.Id.ToString(CultureInfo.InvariantCulture));" },
    { "Group", "writer.WriteElementString(\"{0}\", {0}.Id.ToString(CultureInfo.InvariantCulture));" },
    { "Card", "writer.WriteElementString(\"{0}\", {0}.Id.ToString(CultureInfo.InvariantCulture));" },
    { "Counter", "writer.WriteElementString(\"{0}\", {0}.Id.ToString(CultureInfo.InvariantCulture));" },

    { "Player[]", 
@"foreach (Player p in {0})
  writer.WriteElementString(""{0}"", p.Id.ToString(CultureInfo.InvariantCulture));" },

    { "Group[]", 
@"foreach (Group g in {0})
  writer.WriteElementString(""{0}"", g.Id.ToString(CultureInfo.InvariantCulture));" },

    { "Color?", "writer.WriteElementString(\"{0}\", {0} == null ? \"\" : {0}.ToString());" }
  };
#>